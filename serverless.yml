custom:
  secrets: ${file(.secrets.json)}
  serverless-offline:
    noPrependStageInUrl: true

service: jwt-demo

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ${self:custom.secrets.AWS_REGION}
  apiGateway:
    apiKeys:
      - jwsapikey
  # iam:
  #   role: arn:aws:iam::356353652680:role/atlasDBaccessRole
  environment:
    JWT_SECRET: ${self:custom.secrets.JWT_SECRET}
    AWS_ID: ${self:custom.secrets.AWS_ID}
    MONGODB_URI: ${self:custom.secrets.MONGODB_URI}
    MONGODB_DATABASE: ${self:custom.secrets.MONGODB_DATABASE}
    DATABASE_TYPE: ${self:custom.secrets.DATABASE_TYPE}
  
functions:
  verify-token:
    handler: functions/authorize.handler
  me:
    handler: functions/me.handler
    events:
      - http:
          path: me
          method: get
          cors: true
            # origin: '*' # <-- Specify allowed origin
            # headers: # <-- Specify allowed headers
            #   - Content-Type
            #   - X-Amz-Date
            #   - Authorization
            #   - X-Api-Key
            #   - X-Amz-Security-Token
            #   - X-Amz-User-Agent
            #   - Access-Control-Allow-Origin
            # allowCredentials: true
          # authorizer:
          #   name: verify-token
          #               # this tells the lambda where to take the information from, 
          #               # in our case the HTTP Authorization header
          #   identitySource: method.request.header.Authorization 
          #   resultTtlInSeconds: 3600 # cache the result for 1 hour
          authorizer: verify-token
  login:
    handler: functions/login.handler
    events:
      - http:
          path: login
          method: post
          cors: true
          private: true
  register:
    handler: functions/register.handler
    events:
      - http:
          path: register
          method: post
          cors: true
          private: true
# resources:
#    Resources:
#      Unauthorized:
#        Type: 'AWS::ApiGateway::GatewayResponse'
#        Properties:
#          ResponseParameters:
#            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#          ResponseType: DEFAULT_4XX
#          RestApiId:
#            Ref: 'ApiGatewayRestApi'
resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
plugins:
  - serverless-offline